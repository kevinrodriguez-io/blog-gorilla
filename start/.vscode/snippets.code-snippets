{
  "Next Head Component": {
    "prefix": "nexthead",
    "body": [
      "import React from 'react';",
      "import NextHead from 'next/head';",
      "import { string } from 'prop-types';",
      "",
      "const defaultDescription = '';",
      "const defaultOGURL = '';",
      "const defaultOGImage = '';",
      "",
      "const Head = props => (",
      "  <NextHead>",
      "    <meta charSet=\"UTF-8\" />",
      "    <title>{props.title || ''}</title>",
      "    <meta",
      "      name=\"description\"",
      "      content={props.description || defaultDescription}",
      "    />",
      "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
      "    <link rel=\"icon\" sizes=\"192x192\" href=\"/static/touch-icon.png\" />",
      "    <link rel=\"apple-touch-icon\" href=\"/static/touch-icon.png\" />",
      "    <link rel=\"mask-icon\" href=\"/static/favicon-mask.svg\" color=\"#49B882\" />",
      "    <link rel=\"icon\" href=\"/static/favicon.ico\" />",
      "    <meta property=\"og:url\" content={props.url || defaultOGURL} />",
      "    <meta property=\"og:title\" content={props.title || ''} />",
      "    <meta",
      "      property=\"og:description\"",
      "      content={props.description || defaultDescription}",
      "    />",
      "    <meta name=\"twitter:site\" content={props.url || defaultOGURL} />",
      "    <meta name=\"twitter:card\" content=\"summary_large_image\" />",
      "    <meta name=\"twitter:image\" content={props.ogImage || defaultOGImage} />",
      "    <meta property=\"og:image\" content={props.ogImage || defaultOGImage} />",
      "    <meta property=\"og:image:width\" content=\"1200\" />",
      "    <meta property=\"og:image:height\" content=\"630\" />",
      "  </NextHead>",
      ");",
      "",
      "Head.propTypes = {",
      "  title: string,",
      "  description: string,",
      "  url: string,",
      "  ogImage: string,",
      "};",
      "",
      "export default Head;",
      ""
    ],
    "description": "Next Head Component"
  },
  "Chameleon Colors": {
    "prefix": "chameleoncolors",
    "body": [
      "const colors = {",
      "  flatRed: {",
      "    light: '#E74C3C',",
      "    dark: '#C0392C',",
      "  },",
      "  flatOrange: {",
      "    light: '##E67E23',",
      "    dark: '#D35400',",
      "  },",
      "  flatYellow: {",
      "    light: '#FFCD0E',",
      "    dark: '#FFA800',",
      "  },",
      "  flatSand: {",
      "    light: '#EFDEB4',",
      "    dark: '#D6C194',",
      "  },",
      "  flatNavyBlue: {",
      "    light: '#34495E',",
      "    dark: '#2C3F50',",
      "  },",
      "  flatBlack: {",
      "    light: '#2C2C2B',",
      "    dark: '#272727',",
      "  },",
      "  flatMagenta: {",
      "    light: '#9B59B7',",
      "    dark: '#8E44AC',",
      "  },",
      "  flatTeal: {",
      "    light: '#396F81',",
      "    dark: '#356272',",
      "  },",
      "  flatSkyBlue: {",
      "    light: '#3598DB',",
      "    dark: '#2880B9',",
      "  },",
      "  flatGreen: {",
      "    light: '#2FCC70',",
      "    dark: '#26AE60',",
      "  },",
      "  flatMint: {",
      "    light: '#1ABC9B',",
      "    dark: '#169F84',",
      "  },",
      "  flatWhite: {",
      "    light: '#EDF0F1',",
      "    dark: '#BEC3C6',",
      "  },",
      "  flatGray: {",
      "    light: '#95A5A6',",
      "    dark: '#7E8C8D',",
      "  },",
      "  flatForestGreen: {",
      "    light: '#355F40',",
      "    dark: '#2D5036',",
      "  },",
      "  flatPurple: {",
      "    light: '#735DC5',",
      "    dark: '#5B48A2',",
      "  },",
      "  flatBrown: {",
      "    light: '#5D4534',",
      "    dark: '#503B2C',",
      "  },",
      "  flatPlum: {",
      "    light: '#5E345E',",
      "    dark: '#4F2C4F',",
      "  },",
      "  flatWatermelon: {",
      "    light: '#EE707A',",
      "    dark: '#D95459',",
      "  },",
      "  flatLime: {",
      "    light: '#A4C53A',",
      "    dark: '#8DB022',",
      "  },",
      "  flatPink: {",
      "    light: '#F47BC3',",
      "    dark: '#D45C9F',",
      "  },",
      "  flatMaroon: {",
      "    light: '#79302A',",
      "    dark: '#652622',",
      "  },",
      "  flatCoffee: {",
      "    light: '#A38670',",
      "    dark: '#8E725E',",
      "  },",
      "  flatPowderBlue: {",
      "    light: '#B8CAF2',",
      "    dark: '#98ABD5',",
      "  },",
      "  flatBlue: {",
      "    light: '#5064A1',",
      "    dark: '#394C80',",
      "  },",
      "};",
      "",
      "export default colors;",
      ""
    ],
    "description": "Chameleon Colors"
  },
  "NavComponent": {
    "prefix": "navcomponent",
    "body": [
      "/* eslint-disable jsx-a11y/anchor-is-valid */",
      "import React from 'react';",
      "import Link from 'next/link';",
      "import { useRouter } from 'next/router';",
      "",
      "const Nav = ({ lang }) => {",
      "  const router = useRouter();",
      "  let altLang = getAlternativeLang(router);",
      "  return (",
      "    <nav>",
      "      <ul>",
      "        <li>",
      "          <Link href=\"/[lang]/\" as={`/${lang}/`}>",
      "            <a>Home</a>",
      "          </Link>",
      "        </li>",
      "        <li>",
      "          <Link href=\"/[lang]/\" as={`/${altLang}/`}>",
      "            <a>{altLang === 'es' ? 'ðŸ‡ªðŸ‡¸ EspaÃ±ol' : 'ðŸ‡ºðŸ‡¸ English'}</a>",
      "          </Link>",
      "        </li>",
      "        <ul>",
      "          {links.map(({ key, href, label }) => (",
      "            <li key={key}>",
      "              <Link href={href}>",
      "                <a>{label}</a>",
      "              </Link>",
      "            </li>",
      "          ))}",
      "        </ul>",
      "      </ul>",
      "      <style jsx>{`",
      "        nav {",
      "          text-align: center;",
      "          position: absolute;",
      "          width: 100%;",
      "          z-index: 1;",
      "        }",
      "        ul {",
      "          display: flex;",
      "        }",
      "        nav > ul {",
      "          padding: 4px 16px;",
      "        }",
      "        li {",
      "          display: flex;",
      "          padding: 6px 8px;",
      "        }",
      "        a {",
      "          color: var(--flat-white-light);",
      "          text-decoration: none;",
      "          font-size: 13px;",
      "        }",
      "      `}</style>",
      "    </nav>",
      "  );",
      "};",
      "",
      "export default Nav;",
      ""
    ],
    "description": "NavComponent"
  },
  "NavLinks": {
    "prefix": "navlinks",
    "body": [
      "const links = [].map(link => {",
      "  link.key = `nav-link-${link.href}-${link.label}`;",
      "  return link;",
      "});"
    ],
    "description": "NavLinks"
  },
  "NavGetAlternativeLang": {
    "prefix": "getalternativelang",
    "body": [
      "const getAlternativeLang = router => {",
      "  let altLang = '';",
      "  if (router.query.lang) {",
      "    const { lang } = router.query;",
      "    altLang = lang === 'en' ? 'es' : 'en';",
      "  } else {",
      "    altLang = 'es';",
      "  }",
      "  return altLang;",
      "};"
    ],
    "description": "NavGetAlternativeLang"
  },
  "NextPosts": {
    "prefix": "postscomponent",
    "body": [
      "import React from 'react';",
      "import Link from 'next/link';",
      "import { Segment, Card } from 'semantic-ui-react';",
      "",
      "const Posts = ({ lang, posts }) => {",
      "  return (",
      "    <Segment basic textAlign=\"center\">",
      "      <h2>Posts</h2>",
      "      <Card.Group centered>",
      "        {posts.map(({ fields, sys }) => (",
      "          <Link",
      "            key={sys.id}",
      "            href=\"/[lang]/blog/posts/[slug]\"",
      "            as={`/${lang}/blog/posts/${fields.slug}`}",
      "            passHref>",
      "            <Card",
      "              raised",
      "              header={fields.title}",
      "              meta={new Date(sys.createdAt).toLocaleDateString([",
      "                'es-CR',",
      "                'en-US',",
      "              ])}",
      "              description={fields.shortDescription}",
      "            />",
      "          </Link>",
      "        ))}",
      "      </Card.Group>",
      "    </Segment>",
      "  );",
      "};",
      "",
      "export default Posts;",
      ""
    ],
    "description": "NextPosts"
  },
  "ContentfulClient": {
    "prefix": "contentfulclient",
    "body": [
      "import getConfig from 'next/config';",
      "import { createClient } from 'contentful';",
      "",
      "const {",
      "  CTF_SPACE_ID: space,",
      "  CTF_CDA_ACCESS_TOKEN: accessToken,",
      "} = getConfig().publicRuntimeConfig;",
      "",
      "const blog = createClient({ space, accessToken });",
      "",
      "export default blog;",
      ""
    ],
    "description": "ContentfulClient"
  },
  "ContentfulFetchAllBlogPosts": {
    "prefix": "fetchAllBlogPosts",
    "body": [
      "blog.fetchAllBlogPosts = async (locale, light = true) => {",
      "  const params = { content_type: 'blogPost', locale };",
      "  if (light) params.select = 'fields.title,fields.slug,fields.shortDescription';",
      "  const entries = await blog.getEntries(params);",
      "  return entries.items;",
      "};"
    ],
    "description": "ContentfulFetchAllBlogPosts"
  },
  "ContentfulFetchBlogPostBySlug": {
    "prefix": "getBlogPostBySlug",
    "body": [
      "blog.getBlogPostBySlug = async (locale, slug) => {",
      "  const blogPost = await blog.getEntries({",
      "    content_type: 'blogPost',",
      "    'fields.slug': slug,",
      "    locale,",
      "  });",
      "  if (blogPost.total === 0) throw new Error('There are no posts for that slug');",
      "  return blogPost.items[0];",
      "};"
    ],
    "description": "ContentfulFetchBlogPostBySlug"
  },
  "LocalApis": {
    "prefix": "localapis",
    "body": [
      "import fetch from 'isomorphic-unfetch';",
      "",
      "async function fetchTranslation(lang, namespace) {",
      "  const fetchUrl = process.browser",
      "    ? `/api/translations?lang=${lang}&namespace=${namespace}`",
      "    : `http://localhost:3000/api/translations?lang=${lang}&namespace=${namespace}`;",
      "  const result = await fetch(fetchUrl);",
      "  return result.json();",
      "}",
      "",
      "export default {",
      "  fetchTranslation,",
      "};",
      ""
    ],
    "description": "LocalApis"
  },
  "getLangFromQuery": {
    "prefix": "getlangfromquery",
    "body": [
      "export default function getLangFromQuery({ query }) {",
      "  const { lang } = query;",
      "  const currentLanguage = !lang ? 'en' : lang;",
      "  const locale = currentLanguage === 'en' ? 'en-US' : 'es-CR';",
      "  return { lang: currentLanguage, locale };",
      "}",
      ""
    ],
    "description": "getLangFromQuery"
  },
  "validlangs": {
    "prefix": "validlangs",
    "body": ["export const VALID_LANGS = ['en', 'es'];", ""],
    "description": "validlangs"
  },
  "stylescss": {
    "prefix": "stylescss",
    "body": [
      "body {",
      "  background-color: var(--flat-white-light);",
      "  color: var(--flat-black-dark)!important;",
      "}",
      ".grid-absolute-center {",
      "  display: grid;",
      "  place-content: center;",
      "  width: 100%;",
      "  height: 100%;",
      "  position: absolute;",
      "}"
    ],
    "description": "stylescss"
  },
  "colorscss": {
    "prefix": "colorscss",
    "body": [
      ":root {",
      "  --flat-red-light: #E74C3C;",
      "  --flat-red-dark: #C0392C;",
      "  --flat-orange-light: #E67E23;",
      "  --flat-orange-dark: #D35400;",
      "  --flat-yellow-light: #FFCD0E;",
      "  --flat-yellow-dark: #FFA800;",
      "  --flat-sand-light: #EFDEB4;",
      "  --flat-sand-dark: #D6C194;",
      "  --flat-navy-blue-light: #34495E;",
      "  --flat-navy-blue-dark: #2C3F50;",
      "  --flat-black-light: #2C2C2B;",
      "  --flat-black-dark: #272727;",
      "  --flat-magenta-light: #9B59B7;",
      "  --flat-magenta-dark: #8E44AC;",
      "  --flat-teal-light: #396F81;",
      "  --flat-teal-dark: #356272;",
      "  --flat-sky-blue-light: #3598DB;",
      "  --flat-sky-blue-dark: #2880B9;",
      "  --flat-green-light: #2FCC70;",
      "  --flat-green-dark: #26AE60;",
      "  --flat-mint-light: #1ABC9B;",
      "  --flat-mint-dark: #169F84;",
      "  --flat-white-light: #EDF0F1;",
      "  --flat-white-dark: #BEC3C6;",
      "  --flat-gray-light: #95A5A6;",
      "  --flat-gray-dark: #7E8C8D;",
      "  --flat-forest-green-light: #355F40;",
      "  --flat-forest-green-dark: #2D5036;",
      "  --flat-purple-light: #735DC5;",
      "  --flat-purple-dark: #5B48A2;",
      "  --flat-brown-light: #5D4534;",
      "  --flat-brown-dark: #503B2C;",
      "  --flat-plum-light: #5E345E;",
      "  --flat-plum-dark: #4F2C4F;",
      "  --flat-watermelon-light: #EE707A;",
      "  --flat-watermelon-dark: #D95459;",
      "  --flat-lime-light: #A4C53A;",
      "  --flat-lime-dark: #8DB022;",
      "  --flat-pink-light: #F47BC3;",
      "  --flat-pink-dark: #D45C9F;",
      "  --flat-maroon-light: #79302A;",
      "  --flat-maroon-dark: #652622;",
      "  --flat-coffee-light: #A38670;",
      "  --flat-coffee-dark: #8E725E;",
      "  --flat-powder-blue-light: #B8CAF2;",
      "  --flat-powder-blue-dark: #98ABD5;",
      "  --flat-blue-light: #5064A1;",
      "  --flat-blue-dark: #394C80;",
      "}",
      ""
    ],
    "description": "colorscss"
  },
  "NextDocument": {
    "prefix": "nextdocument",
    "body": [
      "import React from 'react';",
      "import Document, { Html, Head, Main, NextScript } from 'next/document';",
      "",
      "import getLangFromQuery from '../lib/query/getLangFromQuery';",
      "",
      "class BlogDocument extends Document {",
      "  static async getInitialProps(ctx) {",
      "    const initialProps = await Document.getInitialProps(ctx);",
      "    return { ...initialProps, ...getLangFromQuery(ctx) };",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <Html lang={this.props.lang}>",
      "        <Head />",
      "        <body>",
      "          <Main />",
      "          <NextScript />",
      "        </body>",
      "      </Html>",
      "    );",
      "  }",
      "}",
      "",
      "export default BlogDocument;",
      ""
    ],
    "description": "NextDocument"
  },
  "NextApp": {
    "prefix": "nextapp",
    "body": [
      "import React from 'react';",
      "import App, { Container } from 'next/app';",
      "import Error from 'next/error';",
      "",
      "import { VALID_LANGS } from '../lib/translations/validLangs';",
      "",
      "import 'fomantic-ui-css/semantic.min.css';",
      "import './colors.css';",
      "import './styles.css';",
      "",
      "class BlogApp extends App {",
      "  static async getInitialProps({ Component, ctx }) {",
      "    let pageProps = {};",
      "    if (Component.getInitialProps) {",
      "      pageProps = await Component.getInitialProps(ctx);",
      "    }",
      "    BlogApp.AddValidLangPropToPageProps(ctx, pageProps);",
      "    if (pageProps && pageProps.invalidLang) ctx.res.statusCode = 404;",
      "    return { pageProps };",
      "  }",
      "",
      "  render() {",
      "    const { Component, pageProps } = this.props;",
      "    if (pageProps && pageProps.invalidLang)",
      "      return (",
      "        <Error",
      "          statusCode={404}",
      "          title=\"Sorry, but our blog is not available in that language yet\"",
      "        />",
      "      );",
      "    return (",
      "      <Container>",
      "        <Component {...pageProps} />",
      "      </Container>",
      "    );",
      "  }",
      "}",
      "",
      "export default BlogApp;",
      ""
    ],
    "description": "NextApp"
  },
  "AddValidLangPropToPageProps": {
    "prefix": "addvalidlangproptopageprops",
    "body": [
      "  static AddValidLangPropToPageProps(ctx, pageProps) {",
      "    if (!pageProps) return;",
      "    pageProps.invalidLang =",
      "      ctx.query.lang && VALID_LANGS.indexOf(ctx.query.lang) === -1;",
      "  }"
    ],
    "description": "AddValidLangPropToPageProps"
  },
  "index": {
    "prefix": "index",
    "body": [
      "import React from 'react';",
      "import Parallax from 'react-css-parallax';",
      "",
      "import Head from '../components/Head';",
      "import Nav from '../components/Nav';",
      "import Posts from '../components/Posts';",
      "",
      "import blog from '../lib/api/blog';",
      "import local from '../lib/api/local';",
      "import getLangFromQuery from '../lib/query/getLangFromQuery';",
      "",
      "const Index = ({ lang, entries, t }) => {",
      "  return (",
      "    <>",
      "      <Head",
      "        title={t['blogTitle']}",
      "        description={t['blogSubtitle']}",
      "        ogImage=\"/static/darkSea.jpg\"",
      "      />",
      "      <Parallax src=\"/static/darkSea.jpg\" alt=\"Dark sea\" height=\"400px\">",
      "        <Nav lang={lang} />",
      "        <section className=\"grid-absolute-center\">",
      "          <h1>{t['blogTitle']}</h1>",
      "          <p>{t['blogSubtitle']}</p>",
      "          <p>Lang: {lang}</p>",
      "        </section>",
      "      </Parallax>",
      "      <Posts lang={lang} posts={entries} />",
      "      <style jsx>{`",
      "        section h1,",
      "        p {",
      "          color: var(--flat-white-light);",
      "          text-align: center;",
      "        }",
      "        .ma-1em {",
      "          margin: 1em;",
      "        }",
      "      `}</style>",
      "    </>",
      "  );",
      "};",
      "",
      "Index.getInitialProps = async ({ query }) => {",
      "  const { lang, locale } = getLangFromQuery({ query });",
      "  try {",
      "    const [entries, translation] = await Promise.all([",
      "      blog.fetchAllBlogPosts(locale),",
      "      local.fetchTranslation(lang, 'common'),",
      "    ]);",
      "    return { lang, entries, t: translation };",
      "  } catch (error) {",
      "    throw error;",
      "  }",
      "};",
      "",
      "export default Index;",
      ""
    ],
    "description": "index"
  },
  "translationsjs": {
    "prefix": "translationsjs",
    "body": [
      "import { VALID_LANGS } from '../../lib/translations/validLangs';",
      "",
      "export default async function handle(req, res) {",
      "  const { lang, namespace } = req.query;",
      "  if (!lang || !namespace)",
      "    return res.status(400).json({ message: 'LANG_AND_NAMESPACE_REQUIRED' });",
      "  if (VALID_LANGS.indexOf(lang) === -1)",
      "    return res.status(404).json({ message: 'LANG_NOT_FOUND' });",
      "  const langs = await import(`../../lib/translations/lang/namespace.json`);",
      "  return res.status(200).json(langs.default);",
      "}",
      ""
    ],
    "description": "translationsjs"
  },
  "postbyslug": {
    "prefix": "postbyslug",
    "body": [
      "import React from 'react';",
      "import Error from 'next/error';",
      "import Parallax from 'react-css-parallax';",
      "import { Segment } from 'semantic-ui-react';",
      "import { documentToReactComponents } from '@contentful/rich-text-react-renderer';",
      "",
      "import Head from '../../../../../components/Head';",
      "import Nav from '../../../../../components/Nav';",
      "import Posts from '../../../../../components/Posts';",
      "import blog from '../../../../../lib/api/blog';",
      "import getLangFromQuery from '../../../../../lib/query/getLangFromQuery';",
      "",
      "const Index = ({ lang, post, entries, statusCode }) => {",
      "  if (statusCode === 404) return <Error statusCode={404} />;",
      "  const { featuredImage, title, body, shortDescription } = post.fields;",
      "  return (",
      "    <>",
      "      <Head",
      "        title={title}",
      "        description={shortDescription}",
      "        ogImage={featuredImage.fields.file.url}",
      "      />",
      "      <Parallax",
      "        src={featuredImage.fields.file.url}",
      "        alt={featuredImage.fields.description}",
      "        height=\"400px\">",
      "        <Nav lang={lang} />",
      "        <section className=\"grid-absolute-center\">",
      "          <h1>{title}</h1>",
      "        </section>",
      "      </Parallax>",
      "      <Segment basic>{documentToReactComponents(body)}</Segment>",
      "      <Posts lang={lang} posts={entries} />",
      "      <style jsx>{`",
      "        section h1,",
      "        p {",
      "          color: var(--flat-white-light);",
      "          text-align: center;",
      "        }",
      "        .ma-1em {",
      "          margin: 1em;",
      "        }",
      "      `}</style>",
      "    </>",
      "  );",
      "};",
      "",
      "Index.getInitialProps = async ({ res, query }) => {",
      "  const { slug } = query;",
      "  const { lang, locale } = getLangFromQuery({ query });",
      "  try {",
      "    const [entries, post] = await Promise.all([",
      "      blog.fetchAllBlogPosts(locale),",
      "      blog.getBlogPostBySlug(locale, slug),",
      "    ]);",
      "    return { lang, post, entries };",
      "  } catch (error) {",
      "    if (error.message === 'There are no posts for that slug') {",
      "      res.statusCode = 404;",
      "      return { statusCode: 404 };",
      "    }",
      "  }",
      "};",
      "",
      "export default Index;",
      ""
    ],
    "description": "postbyslug"
  }
}
